Que. How many ways we can fetch OR retrieve the Object from the Collection:

There are 9 ways to fetch OR retrieve the Collection Object :

1) By using toString() method of respective class.[JDK 1.0]
2) By using Ordinary for loop. [JDK 1.0]
3) By using for each loop.[JDK 1.5]
4) By using Enumeration<E> interface. [JDK 1.0]
5) By using Iterator<E> interface. [JDK 1.2]
6) By using ListIterator<E> interface. [JDK 1.2]
7) By using SplIteratot<E> interface. [JDK 1.8]
8) By using forEach(Consumer<T> cons) [JDK 1.8]
9) By using Method Reference [JDK 1.8]
------------------------------------------------------------------------------
Note: Among all these 9 ways Enumeration<E>, Iterator<E>, ListIterator<E> and SplIterator<E> are the cursors so it can move from one direction to another.

-----------
Enumeration
-----------
It is a predefined interface available in java.util package from JDK 1.0 onwards(Legacy interface).
We can use Enumeration interface to fetch or retrieve the Objects one by one from the Collection because it is a cursor.
We can create Enumeration object by using elements() method of the legacy Collection class. Internally it uses anonymous inner class object.
public Enumeration elements();
Enumeration interface contains two methods :
1) public Enumeration elements();       // Returns the Enumeration object
2) public boolean hasMoreElements();    // Checks if more elements are available
3) public Object nextElement();         // Returns next element from collection
+------------------------------+
| Hyderabad   [0]             |  <== First element
| Kolkata     [1]             |
| Pune                        |
| Indore                      |
| Mumbai                      |  <== Last element
+------------------------------+
Note It will only work with legacy Collections classes.
-----------
Iterator<E>
-----------
It is a predefined interface available in java.util package available from 1.2 version.
It is used to fetch/retrieve the elements from the Collection in forward direction only because it is also a cursor.
It is also using private inner class i.e Itr class.
public Iterator iterator();
Example
Iterator itr = listOfCity.iterator();
Now, Iterator interface has provided two methods
public boolean hasNext() :- It will verify, the element is available in the next position or not, if available it will return true otherwise it will return false.
public Object next() :- It will return the collection object and move the cursor to the element object.
-------------------------
ListIterator<E> interface
-------------------------
It is a predefined interface available in java.util package and it is the sub interface of Iterator available from JDK 1.2v.
It is used to retrieve the Collection object in both the direction i.e in forward direction as well as in backward direction. Here the inner class name is LstItr class extends from Itr class.
public ListIterator listIterator();
Example
ListIterator lit =   fruits.listIterator();

1) public boolean hasNext() :- It will verify the element is available in the next position or not, if available it will return true otherwise it will return false.
2) public Object next() :- It will return the next position collection object.
3) public boolean hasPrevious() :- It will verify the element is available in the previous position or not, if available it will return true otherwise it will return false.
4) public Object previous() :- It will return the previous position collection object.
Note Apart from these 4 methods we have add(), set() and remove() method in ListIterartor interface.
---------------------
SplIterator interface
---------------------
It is a predefined interface available in java.util package from java 1.8 version.
It is a cursor through which we can fetch the elements from the Collection [Collection, array, Stream]
It is the combination of hasNext() and next() method.
It is using forEachRemaining(Consumer<T> cons) method for fetching the elements.
----
package com.ravi.collection;

import java.util.Enumeration;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.Vector;

public class RetrievingCollectionObject
{
	public static void main(String[] args)
	{
       	Vector<String> listOfCity = new Vector<>();
       	listOfCity.add("Hyderabad");
       	listOfCity.add("Kolkata");
       	listOfCity.add("Pune");
       	listOfCity.add("Indore");
       	listOfCity.add("Mumbai");

       	System.out.println("1) By using toString() method :");
       	System.out.println(listOfCity.toString());


       2) By using Ordinary for loop :

       	for(int i=0; i<listOfCity.size(); i++)
       	{
    	   		System.out.println(listOfCity.get(i));
       	}

       3) By using for Each loop :

       	for(String city : listOfCity)
       	{
    	   		System.out.println(city);
       	}


       4) By using Enumeration interface :

       	Enumeration<String> ele = listOfCity.elements();
       	while(ele.hasMoreElements())
       	{
    	  		System.out.println(ele.nextElement());
       	}


       5) By using Iteartor interface :

       	Iterator<String> itr = listOfCity.iterator();
       	itr.forEachRemaining(city -> System.out.println(city));

6) By using ListIteartor interface :

       	ListIterator<String> lstItr = listOfCity.listIterator();

       	System.out.println("IN FORWARD DIRECTION ..");
       	while(lstItr.hasNext())
       	{
    	   		System.out.println(lstItr.next());
       	}

       	System.out.println("IN BACKWARD DIRECTION ..");
       	while(lstItr.hasPrevious())
       	{
    	   		System.out.println(lstItr.previous());
       	}


      7) By using SplIterator interface :

      		Spliterator<String> splItr = listOfCity.spliterator();
      		splItr.forEachRemaining(city -> System.out.println(city));

      8) By using forEach() Method:

      		listOfCity.forEach(city -> System.out.println(city));

      9) By using Method Reference:

      		listOfCity.forEach(System.out::println);
	}
}
