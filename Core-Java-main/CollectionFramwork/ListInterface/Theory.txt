1. What is the List Interface?

The List interface is part of the Java Collection Framework and extends the Collection interface.
It represents an ordered collection of elements where:

    1) Duplicates are allowed.
    2) Insertion order is preserved (elements are stored in the order they are added).
    3) Elements can be accessed by their index (position).


*** 2. Key Features of the List Interface **

1)Ordered Collection:

    * Elements are stored in a specific sequence.
    * You can access elements by their index (e.g., list.get(0)).

2) Allows Duplicates:

    * The same element can be added multiple times.

3) Null Elements:

    * Most implementations allow null elements (e.g., ArrayList, LinkedList).

4) Index-Based Operations:

    * You can add, remove, or retrieve elements at specific positions.



*** 3. List Interface Hierarchy ***
The List interface has the following implementations:

 Collection Interface
 └── List Interface
    ├── ArrayList
    ├── LinkedList
    ├── Vector (legacy)
    │   └── Stack (legacy)



** 7. When to Use Which List Implementation? **

1) ArrayList:    Default choice for most use cases (fast random access).

2) LinkedList:   When you need frequent insertions/deletions at the beginning or middle.

3) Vector:       Legacy, thread-safe list (use Collections.synchronizedList() instead for modern applications).

4) Stack:        When you need a stack data structure.





