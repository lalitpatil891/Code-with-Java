Running Notes
-----------------
-> How many programming elements we have?
Ans : 
     1. module   
     2. package
     3. class
     4. variable
     5. method
     6. block
     7. constructor
     8. inner classes
       
-> What is an object?
-> How to create object and syntax to create object.
   className referencevar = new className()
                                [constructor]
   Student s = new Student();
   Dog d = new Dog();
   Student s1 = null;
   int : 0
   double : 0.0
   Animal : null
   String : null

-> What is a reference variable?
A reference variable is a variable that stores the memory address of an object. It doesn't directly store the object's data but points to the location where the object is stored in memory.

-> What type of values we can store in a reference variable?
Reference variables can store references to objects of any class type or null. They cannot store primitive data types like int, double, boolean, etc.

-> What is the work of new keyword?
The new keyword is used to create new objects in Java. It allocates memory for the object the assigns default values to its instance variable after that it invokes the constructor and finally returns the object reference to that memory location.

-> Objects are created in which area?
Objects are created in the heap memory area. When you use the new keyword, memory is allocated in the heap for the object, and its address is stored in the reference variable.

-> Memory allocation diagram.

-> What is constructor?
A constructor is a special method in Java that is  called when an object of a class is created. It's used to initialize the object's instance variables.

-> Work of constructor.
Initialization: Initializes the object's instance variables with default or specified values.

-> What is default constructor?
A default constructor is a constructor that has no parameters. It is automatically added by the compiler if you don't explicitly define any constructors in your class.

-> What is the work of default constructor?
-> Is default constructor present in every class?
Yes, unless you explicitly define one or more constructors in your class, the compiler will automatically add a default constructor.

-> Who adds default constructor to our class?
The Java compiler adds the default constructor.

-> Why compiler adds default constructor to our class?
The compiler adds a default constructor to ensure that you can create objects of the class without providing any arguments. It provides a convenient way to create objects with default initialization.
==================================================

-> Types of variable?
    //Based on data type
      1.primitive var(8)
      2.reference var(5)[class,interface, Enum, array, annotation]

   //Based on scope...
      1. class level
            a) static - var    
            b) non - static var
      2. method level
            c) local var
            d) parameters

-> Memory allocation of all above variables.  
    
     
-> Local variable and its rules.
-> Initial or default values of variable?

   -> Only class level var have default values
      byte: 0
      short: 0
      int : 0
      long: 0

      float:0.0
      double: 0.0
      
      boolean:false
      char: \\u0000

       reference type: null
        String: null
        Integer: null
        Student: null

      
-> Scope and life-time of static and non-static variable.

Static Variables:

Scope: Class-level scope, accessible from any static or non-static member of the class.
Lifetime: Exists throughout the program's execution, even when no objects of the class exist.
Memory Allocation: Allocated in the static memory area.
Initialization: Initialized only once, when the class is loaded.

Non-Static Variables (Instance Variables):

Scope: Instance-level scope, accessible only from within the instance of the class.
Lifetime: Exists as long as the object exists.
Memory Allocation: Allocated on the heap when an object is created.
Initialization: Initialized either explicitly or with default values (0 for numbers, null for objects) when an object is created.

class MyClass {
    static int staticVar = 10; // Static variable
    int instanceVar = 20; // Instance variable

    public static void staticMethod() {
        System.out.println(staticVar); // Can access staticVar
        // Cannot access instanceVar directly
    }

    public void instanceMethod() {
        System.out.println(staticVar); // Can access staticVar
        System.out.println(instanceVar); // Can access instanceVar
    }
}


-> How many members we can define inside a class?
       1. static members        2. Non-static members
          -> SV                      -> NSV
          -> SM                      -> NSM
          -> SB                      -> NSB
          -> MM                      -> Constructor
          -> SIC                     -> NIC
    
       
-> What are the members called as Non-static members?
-> Types of non-static members?
-> When do all these members get memory location and by whom.
When: When an object of the class is created using the new keyword.
By Whom: The Java Virtual Machine (JVM) allocates memory for the object on the heap.

===============================================================================

-> What is an object ?
An object is an instance of a class. It represents a real-world entity with specific properties (attributes) ,behaviors (methods) and identity(unique address).

-> What is non-static variable/Instance variable?
A non-static variable, also known as an instance variable, is a variable declared within a class but outside of any method. Each object of the class has its own copy of these variables.

-> Will JVM executes non-static variable automatically?
The JVM doesn't automatically execute non-static variables. They come into existence when an object of the class is created using the new keyword.

-> When, Where, how and by whom non-static variables get memory location?
When: When an object is created using the new keyword.
Where: In the heap memory.
How: The JVM allocates memory for the object and its instance variables.
By Whom: The JVM allocates memory.

-> How many objects can be created for a class?
You can create as many objects of a class as you need. Each object will have its own set of instance variables.

-> If we modify one object data will another object data also modified?
No, modifying one object will not affect another object, even if they are of the same class.

Each object in Java has its own unique set of instance variables. When you create multiple objects of the same class, each object gets its own copy of these instance variables. Â  

class Car {
    String color;
    int mileage;
}

public class Main {
    public static void main(String[] args) {
        Car car1 = new Car();
        Car car2 = new Car();

        car1.color = "Red";
        car2.color = "Blue";

        // Modifying car1's color won't affect car2's color
    }
}

-> Initializing non-static variable.
    -> Direct initialization at the time of declaring the variable.
    -> How to initialize instance variable by using object reference.
    -> How to provide our own user-defined values for the instance variable by.
       using no parameterized method.
    -> How to initialize the Object properties through parameter variable.




-> Non-static methods

-> Does JVM executes non static method automatically when object is created?
No, the JVM doesn't automatically execute non-static methods when an object is created. They are executed only when called explicitly on an object of the class.

-> Can we create object without having non-static variable in the class?
Yes, you can create an object even if a class doesn't have any non-static variables. 

-> Can we access non-static variable inside a non-static method?
Non-static methods are associated with specific instances of a class. When you create an object of that class, each object has its own set of non-static variables. A non-static method can access these non-static variables directly by their name.


-> How it is possible to call non-static variable directly without object inside a non static method?
Ans : 
Non-static method gives guarantees that to invoke it we need an object, so when object is created to call non-static method then all the variable memory is also available, so we can access non-static variable inside a non-static method.

When we are calling non-static variable directly by its name implicitly compiler adds this keyword before every non-static variable.

Example Program : 
=========================
import java.util.Scanner;
class Student 
{
	int sId;
	String sName;
	String course;
	double fee;
	double marks;  
    d
	public void setDetails(int sId, String sName,String course, double fee, double marks ) {
       //If the name of parameter an instance variables are same then it is called variable shadowing.
       //To overcome of variable shadowing we are using this keyword to differentiate between local and instance variable..
	 this.sId = sId;
	 this.sName = sName;
	 this.course = course;
	 this.fee = fee;
	 this.marks = marks;

	}
	public  void displayDetails() {
		System.out.println("Student id : "+this.sId);
		System.out.println("Student name : "+this.sName);
		System.out.println("Student course : "+this.course);
		System.out.println("Student fee : "+this.fee);
		System.out.println("Student marks : "+this.marks);
		
	}
	
	
}
class Test06
{
	public static void main(String[] args) 
	{
		System.out.println("Main");
		Student s1 = new Student();
		
		
		s1.setDetails();
		s1.displayDetails();
		
		
	}
}


-> Variable shadowing
======================
Variable shadowing occurs when a variable declared in an inner scope (like a method or a block) has the same name as a variable declared in an outer scope (like a class or a method). In such cases, the inner-scope variable "shadows" the outer-scope variable, meaning that within the inner scope, the inner-scope variable takes precedence.


-> Compiler and JVM activity in variable shadowing.
During execution, when the variable is accessed within the scope where it's declared, the JVM uses the value of the inner-scope variable. The outer-scope variable is temporarily hidden.

The inner-scope variable takes precedence within its scope.

public class ShadowingExample {
    int x = 10; // Outer scope variable

    public void myMethod() {
        int x = 20; // Inner scope variable (shadows the outer scope variable)
        System.out.println(x); // Prints 20
    }
}

Q) How to overcome from variable shadowing?

Ans : Using this keyword for non-static variable we can overcome from variable shadowing.

Test case of this kw:
---------------------------
class Test07 
{
	int x = 10;
	void m1() {
          System.out.println("m1: "+ this.x);// Here this kw holds current object reference/address
	}	
	public static void main(String[] args) 
	{
		Test07 t1 = new Test07(); 
		Test07 t2 = new Test07(); 
		t1.x = 20;
                t2.x = 30;
		t1.m1();
		t2.m1();
		
		
		
	}
}
Q)What is current object?
Ans : On which object we are performing operation that is known as current object.

Q) What is this keyword?
Ans: This keyword is a final parameterized reference variable of current type which stores 
     current object reference/address.
     
     This keyword is available in every non-static method and constructor as a parameter.
    
     We can use this keyword in the case of variable shadowing to differentiate between the 
     parameterized variable and instance variable.
    
     We use this keyword to access current object instance member inside a constructor or 
     non static method.

     We can print this keyword by using Sopln. If we will print this keyword then current
     object address will display int below format.

     ClassName@1a23e  -> First class name then @ and then hexadecimalNumber.

     In static area this keyword is not allowed. If we will use this keyword in static area 
     the we'll get compile error.
     
     

Date : 06/11/24
====================
Programs :
--------------
Program - 01
--------------
class Example01  
{
	//Variable shadowing
	int x = 10;
	void m1() {
		int x = 40;
		System.out.println("m1 :"+this.x);  
	}
	public static void main(String[] args) {
		Example01 e1 = new Example01();
		System.out.println(e1.x);	//10
		e1.m1();	//10
	}		
}


Program - 02
--------------
class Example02 
{
	//Variable shadowing
	int x = 10;
	//this : stores current object reference/address
	void m1() {	
		System.out.println("m1 :"+this); // this = 2000x
	}
	public static void main(String[] args) {
		Example02 e1 = new Example02();	//e1 : 1000x x: 10
		System.out.println(e1);
		e1.m1();			//1000x.m1()
		System.out.println("---------------------------");
		Example02 e2 = new Example02();	//e2 : 2000x x: 10
		System.out.println(e2);		//2000x
		e2.m1();			//2000x.m1()	
	}	
}

Program - 03
--------------
class Example03 
{
	public void add( int a, int b) { // a = 10 b = 40
		System.out.println(a+b);  //50
	}
	public static void main(String[] args) 
	{
		Example03 e1 = new Example03();
		int x = 10, y = 40;
		e1.add(x,y);
	}
}

Program - 04
--------------
class Example04 
{
	int x;
	int y;

	//this : this is a final prameterized referenced variable of current class type which  stores current object address
	 
	public static void add() {			//this = 1000x
		System.out.println( this.x + this.y );
	}
	
	public static void main(String[] args) 
	{
		Example04 e1 = new Example04(); 	//e1 = 1000x x: 30 y = 40
		e1.x = 30;
		e1.y = 40;
		e1.add();
		Example04 e2 = new Example04();
		e2.x = 40;
		e2.y = 50;
		e2.add();		
x`	}
}

Program - 05
--------------
class Example06 
{
	int x;
	int y;
	public void m1() {
		                   // 20           30
		System.out.println(this.x+" ," + this.y);
		Example06 e = new Example06();
		                   // 0          0
		System.out.println(e.x+" ," + e.y);
		this.x = 60;
		this.y = 50;
	}
	public static void main(String[] args) 
	{
		Example06 e1 = new Example06();
		System.out.println(e1.x+" ," + e1.y);
		                   //0         //0
		e1.x = 20; e1.y = 30;
		e1.m1();
		System.out.println(e1.x+" ," + e1.y);
		
	}
}

Program - 06
--------------
class Example07 
{
	int x;
	int y;
	public void m1(Example07 e) {	           
		System.out.println(this.x+" ,"+y); // 20    30  #2
		System.out.println(e.x+" ," + e.y);// 40    50  #3
		this.x = 70;
		e.y = 80;
	}
	public static void main(String[] args) 
	{
		Example07 e1 = new Example07();//e1 = 1000x : x: 70 , y = 30 
		System.out.println(e1.x+" ," + e1.y);//0     0  #1
		e1.x = 20; e1.y = 30;
		Example07 e2 = new Example07(); //e2 = 2000x : x: 40   y: 80
		e2.x = 40; e2.y = 50;
		e1.m1(e2);
		System.out.println(e1.x+" ," + e1.y);//70 30 #4
		System.out.println(e2.x+" ," + e2.y);//40 80 #5
	}
	
}

Program - 07
--------------
class Student 
{
	int phy;
	int math;
	int eng;
	
	public void calculateAvg() { 
		 System.out.println("Phy : "+this.phy+", "+"Math: "+this.math+", Eng: "+this.eng);
		 int avg = (this.phy+this.math+this.eng)/3;
		 System.out.println(avg);
	}
	
	public static void main(String[] args) 
	{
		Student s1 = new Student(); //s1 = 1000x p: 60 M: 90 E: 70
		s1.phy = 60; s1.math = 90; s1.eng = 70;
		Student s2 = new Student(); //s2 = 2000x p: 70 M: 80 E: 90 
		s2.phy = 70; s2.math = 80; s2.eng = 90;
		s1.calculateAvg();
		System.out.println();
		s2.calculateAvg();	
	}
}
Program - 10
---------------
class Demo 
{
	int x;
	int y;
	public void m1() {
	System.out.println(this.x+ ", "+y);
	}
	public static void main(String[] args) 
	{
		Demo d1 = new Demo();//1000x : x: 10 y = 20
		d1.x = 10;
		d1.y = 20;
		//d1.m1();
		System.out.println(d1.x +" "+d1.y);
	        d1 = new Demo(); // d1: 2000x x: 0 y: 0
		System.out.println(d1.x +" "+d1.y);
		
		
		
		//If the object is refered by multiple reference variable 
		//then those reference variables are known as Object alias.
			
	}
}

Setter/Getter
=====================
Program - 11
--------------
class Employee {
	private String name;
	private int id;
	private double salary;
	private int yoe;
	
	public void setDetails(String name, int id, double salary, int yoe){
		 this.name = name;
		 this.id = id;
		 this.salary = salary;
		 this.yoe = yoe;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	public void setYoe(int yoe) { //setYoe
		this.yoe = yoe;
	}
	
	public void increaseSalary() {
		if(yoe>=5) {
			 salary+=10000;
		}
	}
	public double getSalary() {
		return salary;
	}
	
	public void getDetails() {
		System.out.println("Name :"+name);
		System.out.println("Id :"+id);
		System.out.println("Salary :"+salary);
		System.out.println("Yoe :"+yoe);
	}
	
}
class Test01 
{
	public static void main(String[] args) 
	{
		Employee e1= new Employee();
		e1.setDetails("Raaaaaaaaaaaaaaaam",101,50000,2);
		//System.out.println("Sal : "+e1.salary); CE
		//e1.salary = 0; CE
		//e1.yoe = 5; CE
		//e1.name = "Raam"; CE
		e1.setName("Raam");
		System.out.println("Sal : "+e1.getSalary());
		e1.setYoe(6);
		e1.increaseSalary();
		System.out.println("Sal : "+e1.getSalary());
		e1.getDetails();	
		
	}
}















